# Script to enable Kerberos for our Fusion Directory based infrastructure
# FIXME: This is going to take a LARGE explanation of what's going on.

# We must run this script as root
if [ "$USER" != "root" ]; then
        echo "Must be root to execute script..."
        exit 1
fi

# Has the squeeze-install-FusionDirectory run?
if [ ! -f /etc/fusiondirectory/fusiondirectory.conf ]; then
  echo "Run the squeeze-install-FusionDirectory script before this one.  It must be"
  echo "installed and configured before we can continue..."
  exit 1
fi

# Has squeeze-install-FusionDirectory-Server-Infrastructure run?
if [ ! -f /etc/gosa-si/server.conf ]; then
  echo "Run the squeeze-install-FusionDirectory-Server-Infrastructure script before"
  echo "this one.  GOsa-SI must be installed and configured before we can continue."
  exit 1
fi

# FIXME: Which of these files are required on the client and on the server?  Document.
apt-get -y --force-yes install gosa-si-client-krb5 fusiondirectory-plugin-mit-krb5 fusiondirectory-plugin-mit-krb5-schema krb5-kdc-ldap krb5-admin-server krb5-kdc krb5-config krb5-user sasl2-bin libsasl2-modules-gssapi-mit

# libpam-krb5 

# FIXME: At the moment I don't install the following, but compile the latest
#        version because of its extra Kerberos support.  After this gets to
#        the repos we should instead install this in the normal way.
# libnss-ldapd

## Commented out because I THINK this is obsoleted by sssd(?)
#cd /usr/src
#svn co http://arthurdejong.org/svn/nss-pam-ldapd/nss-pam-ldapd nss-pam-ldapd
#cd /usr/src/nss-pam-ldapd
#apt-get -y --force-yes install libkrb5-dev libldap2-dev libsasl2-dev docbook2x libpam0g-dev
#dpkg-buildpackage -b
#cd /usr/src
#dpkg -i 

# libnss-ldapd - get passwd, shadow and group file information from LDAP

# in order to use Kerberos password for local auth and obtain Kerberos credentials
# automatically when logging in, install and configure libpam-krb5

# Insert hdb schema and kerberos schema into cn=config
# hdb schema = Schema allowing FusionDirectory to store settings that gosa-si uses when
#              it needs to issue commands to Kerberos using the kadmin program.
# kerberos schema = Kerberos can store KDC info directly in LDAP instead of
#                   using its own database.  This way Kerberos can rely on LDAP
#                   for replication etc...  without separate configuration.
# FIXME: Is this actually a correct understanding?
zcat /usr/share/doc/krb5-kdc-ldap/kerberos.ldif.gz > /etc/ldap/schema/kerberos.ldif

if [ -f /etc/ldap/schema/fusiondirectory/hdb.ldif ]; then
	echo "Adding schemas to LDAP tree..."
else
	echo "Hopefully ldif versions of schemas will be packaged soon,"
	echo "but until this happens you will need to create these by hand."
	echo "You could use slaptest, or the schema2bcldif.sh script."
	echo "Please create ldif version of the hdb schema in"
	echo "/etc/ldap/schema/fusiondirectory and hit <enter> to continue..."
	read dummy
fi

ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/kerberos.ldif
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/fusiondirectory/hdb.ldif

# FIXME: We've changed configuration to cn=config.  Test, then delete this...
#cat >> /etc/ldap/slapd.conf <<-EOF
#
#	# Added by squeeze-install-Kerberos script
#	include         /etc/ldap/schema/fusiondirectory/hdb.schema
#	include         /etc/ldap/schema/kerberos.schema
#	index      krbPrincipalName      eq,pres,sub
#EOF

cat > /tmp/fix.ldif <<-EOF
	dn: olcDatabase={1}hdb,cn=config
	replace: olcDbIndex
	olcDbIndex:   krbPrincipalName		eq,pres,sub
EOF
ldapmodify -Y EXTERNAL -H ldapi:/// -f /tmp/fix.ldif
rm /tmp/fix.ldif

/etc/init.d/slapd stop
sudo -u openldap slapindex
/etc/init.d/slapd stop

/etc/init.d/slapd restart

# If there are issues with restarting slapd you can try running slapd from 
# the commandline.  The -d switch specifies debugging...  specify the debug
# level required eg :
# slapd -d 1 -h "ldaps:/// ldapi:///" -F /etc/ldap/slapd.d

LDAP_ADMIN_DN=`grep 'adminDn="' /etc/fusiondirectory/fusiondirectory.conf | awk -F'"' '{ print $2 }' #| awk -F',' '{ print $1 }'`
echo "LDAP admin dn extracted from /etc/fusiondirectory/fusiondirectory.conf"
LDAP_BASE_DN=`ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config olcSuffix | grep ^olcSuffix | awk '/ */{ print $2 }'`
echo "Base DN extracted from cn=config : "$LDAP_BASE_DN
LDAP_FQDN=`hostname --fqdn`
LDAP_DOMAIN=`hostname --domain`
LDAP_URI=`grep ^URI /etc/ldap/ldap.conf | awk '{ print $2 }'`
KRB_REALM=`echo $LDAP_DOMAIN | awk '{print toupper ($0)}'`
LDAP_ADMIN_PW=`grep 'adminPassword="' /etc/fusiondirectory/fusiondirectory.conf | awk -F'"' '{print $2 }'`
echo "LDAP admin password extracted from /etc/fusiondirectory/fusiondirectory.conf"

# Rather than modify the existing krb5.conf file I'm just installing a
# completely new one as there are lots of options not required.
# FIXME: Is this true?  Perhaps there are defaults I may want to change.
cat > /etc/krb5.conf << EOF
[libdefaults]
        default_realm = $KRB_REALM

[realms]
         $KRB_REALM = {
             kdc = $LDAP_FQDN
             admin_server = $LDAP_FQDN
             master_kdc = $LDAP_FQDN
             default_domain = $LDAP_DOMAIN
             database_module = openldap_ldapconf
         }

[domain_realm]
         .$LDAP_FQDN = $KRB_REALM
         $LDAP_FQDN = $KRB_REALM

[dbmodules]
        openldap_ldapconf = {
                db_library = kldap
                # NOTE:: We're not storing Kerberos stuff under a special area.
                ldap_kerberos_container_dn = "$LDAP_BASE_DN"
                ldap_kdc_dn = "$LDAP_ADMIN_DN"

                # this object needs to have read rights on
                # the realm container, principal container and realm sub-trees
                ldap_kadmind_dn = "$LDAP_ADMIN_DN"

                # this object needs to have read and write rights on
                # the realm container, principal container and realm sub-trees
                ldap_service_password_file = /etc/krb5kdc/service.keyfile
                ldap_servers = ldaps://$LDAP_FQDN
                ldap_conns_per_server = 5
        }
EOF

## If storing the KDC in its own database (hdb) instead of LDAP we would have
## used the following command to create a new realm. 
## See /usr/share/doc/krb5-kdc/README.KDC file for more info
#krb5_newrealm


# The kdb5_ldap_util utility creates the new Kerberos realm in LDAP :
kdb5_ldap_util -D  $LDAP_ADMIN_DN create -subtrees $LDAP_BASE_DN -s -H ldaps://$LDAP_FQDN -r $KRB_REALM
# FIXME: I believe the database master password is stored in a file.  Find out
#        and write a note here.

# Create a stash of the password used to bind to the LDAP server. This password
# is used by the ldap_kdc_dn and ldap_kadmin_dn options in /etc/krb5.conf:
# FIXME: Instead of using our existing LDAP admin dn, should I create a new one
#        and then use this here?  If so why?  If not why not?
kdb5_ldap_util -D $LDAP_ADMIN_DN stashsrvpw -f /etc/krb5kdc/service.keyfile $LDAP_ADMIN_DN

# FIXME: If we didn't use the LDAP_ADMIN_DN and instead created a non-privleged
#        LDAP user to manage Kerberos we would need to create some LDAP ACLs to
#        allow r/w access to the Kerberos KDC database in the LDAP tree here.

# Create kadm5.acl and specify that principles ending in "/admin" will be
# administrators ie. have all (or *) priveleges.
echo "*/admin *" > /etc/krb5kdc/kadm5.acl

# We should create a principle for an admin user in our new realm.
# FIXME: Can we get the admin username and password from fusiondirectory.conf ie. :
# adminDn="cn=admin,dc=strategicit,dc=homelinux,dc=net"
#                        adminPassword="aicham" />
kadmin.local -q "addprinc admin"
kadmin.local -q "addprinc admin/admin"
# DEBUG: To test Kerberos is working ie. :
# kinit <username>
# (if the principle is the same as your current username no need to enter a
#  username)
# ...and to list your TGT (ticket granting ticket/s) :
# klist

# Create a Kerberos service principal for the LDAP service, and extract this
# to a keytab file (FIXME: for reading by?).  We need to configure slapd
# to pick this up.
kadmin.local -q 'addprinc -randkey ldap/'`hostname --fqdn`
kadmin.local -q 'ktadd -k /etc/krb5.keytab ldap/'`hostname --fqdn`

# ...and create a host principle (used by saslauthd)
# FIXME: are "host" principles used for services running as root?
#        ..and is it similar to the idea of a MS machine account?
kadmin.local -q 'addprinc -randkey host/'`hostname --fqdn`
kadmin.local -q 'ktadd -k /etc/krb5.keytab host/'`hostname --fqdn`


# Give keytab file correct permissions for reading by our LDAP server.
chgrp openldap /etc/krb5.keytab; chmod 640 /etc/krb5.keytab

# Configure our LDAP server to use this keytab file.
# FIXME: This may not be required...  /etc/krb5.keytab may be the default
sed -i 's@#export KRB5_KTNAME=/etc/krb5.keytab@export KRB5_KTNAME=/etc/krb5.keytab@' /etc/default/slapd
/etc/init.d/slapd restart

sed -i 's@MECHANISMS="pam"@MECHANISMS="kerberos5"@' /etc/default/saslauthd
sed -i 's@START=no@START=yes@' /etc/default/saslauthd


# FIXME: I read docs about pwcheck_method: slapd...  is this wrong?
# Sasl looks for config in /etc/ldap/sasl2/slapd.conf when queried by slapd becuase
# $application_name is one of the parameters passed to libsasl.
cat > /etc/ldap/sasl2/slapd.conf <<-EOF
	#pwcheck_method: slapd
	mech_list: GSSAPI
	keytab: /etc/krb5.keytab
EOF

/etc/init.d/saslauthd restart

# To debug/test saslauthd use :
# testsaslauthd -u <username> -p <password>
#
# You can also run saslauthd from the commandline with the -d option to get debug
# information. eg :
# /usr/sbin/saslauthd -d -a ldap -m /var/run/saslauthd
# If while debugging you get a [reason=Unknown] in your debug output it
# is possible your /etc/saslauthd.conf is wrong/corrupt.
# If you get [reason=internal error] it could be your host principle is
# wrong (fully qualified domain name, or not... depends).  kinit -k
# will fail if this is the problem.

# FIXME: Change configuration to cn=config.  Test and delete this...
## Configure the mapping from the SASL cn=auth branch to your user branch...
## This allows clients which can't use GSSAPI binds to still auth against LDAP.
#cat >> /etc/ldap/slapd.conf <<-EOF
#
#	# This is a bit of a hack to restrict the SASL mechanisms that the
#	# server advertises to just GSSAPI.  Otherwise it also advertises
#	# DIGEST-MD5, which the clients prefer.  Then you have to add "-Y
#	# GSSAPI" to all of your ldapsearch/ldapmodify/etc. command lines, which
#	# is annoying.  The default for this is noanonymous,noplain so the
#	# addition of noactive is what makes DIGEST-MD5 and the others go away.
#	sasl-secprops noanonymous,noplain,noactive
#	
#	
#	authz-regexp
#	  uid=([^,]*),cn=$KRB_REALM,cn=gssapi,cn=auth
#	  uid=$1,ou=people,$LDAP_BASE_DN
#EOF

cat > /tmp/fix.ldif <<-EOF
	dn: cn=config
	add: olcSASLSecprops
	olcSASLSecprops:	noanonymous,noplain,noactive

	dn: cn=config
	add: olcAuthzRegExp
	olcAuthzRegExp:	uid=([^,]*),cn=$KRB_REALM,cn=gssapi,cn=auth uid=$1,ou=people,$LDAP_BASE_DN
EOF
ldapmodify -Y EXTERNAL -H ldapi:/// -f /tmp/fix.ldif
rm /tmp/fix.ldif

## To test GSSAPI authentication is working in LDAP use the -Y switch, eg :
# ldapsearch -Y GSSAPI -b "put-your-base-dn-in-nere"
# If your client isn't set up for Kerberos you will need to do a kinit to
# get a kerberos TGT first.
# ldapwhoami is also a useful test command.  Use it argument free to test
# GSSAPI authentication, or force a simple bind eg.
# ldapwhoami -x -D 'cn=admin,dc=example,dc=com' -W
# to test if our authz-regexp magic enables non-kerberised clients tos bind.

## nslcd enables lookup of password and group info in LDAP in
## addition to the traditional unix files such as passwd, shadow, group
## etc... Here we configure nslcd to use our Kerberos credentials to access
## this info, although with our configuration it is also still possible
## to use a simple LDAP bind).
#cat >> /etc/nslcd.conf <<-EOF
#	#SASL
#	use_sasl on
#	sasl_mech GSSAPI
#	krb5_ccname FILE:/tmp/host.tkt
#EOF
#
## To test nslcd is enabling access to ldap try to access user info in LDAP :
## getent passwd <username>
## ...where <username> is the name of a user in LDAP but not on the local
## machine.
##Adjust the path to the credentials cache as necessary.
##Create the /etc/default/nslcd configuration file referenced in the Upstart scripts:
##NSLCD configuration options
##network interface to watch
#NSLCD_IFACE=eth0
##Kerberos stuff
#KRB5_KEYTAB=/etc/krb5.keytab
#KRB5_CCNAME=/tmp/host.tkt
#KRB5_PRINCIPAL="host/`hostname -f`"
##time in minutes between cache updates
#KRB5_CCREFRESH=60Adjust the options as necessary.


# We need to add this...  the manpages of this file should document
sed -i 's@#\[krb5\]@\[krb5\]@' /etc/gosa-si/client.conf
sed -i 's@#admin = user@admin = user@' /etc/gosa-si/client.conf
sed -i 's@#password = password@password = password@' /etc/gosa-si/client.conf

sed -i 's@useSaslForKerberos="false"@useSaslForKerberos="true"@' /etc/gosa/gosa.conf

# FIXME: Perhaps this should be split out into another script?
# This is for setting up the machine as a kerberos+LDAP client system
# sssd : Provides a set of daemons to manage access to remote directories and
#        authentication mechanisms.
# libpam-sss : PAM plugin for sssd
# libnss-sss : NSS plugin for sssd
# libpam-mklocaluser : When the user log in for the first time, a local user
#                      is created in /etc/passwd, a primary group is created
#                      in /etc/group, and a local home directory is created in
#                      /home.  This is useful for roaming computers when the
#                      password is cached by for example libpam-ccreds or sssd.

# FIXME: Should we really remove nscd????  How about nslcd???
#        Perhaps this usually doesn't get installed?
apt-get purge -y nscd

apt-get install -y sssd libpam-sss libnss-sss libpam-mklocaluser

# The existing sssd.conf contains commented examples so we back it up.
mv /etc/sssd/sssd.conf /etc/ssd/ssd.conf.backup

# We create a new sssd.conf (because ours differs substantially
cat > /etc/sssd/sssd.conf <<-EOF
	[sssd]
	config_file_version = 2
	reconnection_retries = 3
	sbus_timeout = 30
	services = nss, pam
	domains = $KRB_REALM
	
	[nss]
	filter_groups = root
	filter_users = root
	reconnection_retries = 3
	
	[pam]
	reconnection_retries = 3
	
	[domain/$KRB_REALM]
	# Why is this value true?
	enumerate = true
	cache_credentials = true
	
	id_provider = ldap
	auth_provider = krb5
	# What's this about?  Do we need it?
	#chpass_provider = ldap
	
	# LDAP config options
	ldap_uri = $LDAP_URI
	ldap_search_base = $LDAP_BASE_DN
	ldap_tls_reqcert = never
	ldap_tls_cacert = /etc/ssl/certs/ssl-cert-local-ca.pem
	
	# Kerberos config options
	krb5_kdcip = $LDAP_FQDN
	krb5_realm = $KRB_REALM
EOF

# FIXME: On a client machine /etc/ssl/certs/ssl-cert-local-ca.pem won't exist
#        yet.  This file needs to be copied from the server.
# scp root@$LDAP_FQDN:/etc/ssl/certs/ssl-cert-local-ca.pem /etc/ssl/certs/ssl-cert-local-ca.pem

/etc/init.d/sssd restart

# To debug sssd at the command prompt type :
# sssd -i -d 10
# -i = interactive mode, -d = debug level... values can be from 0 - 10


# It must be noted that, from a service / server point of view, the realm used for
# authenticating when accessing a service is by default the upper-case conversion
# of the DNS domain name of the accessed server hostname. Thus, it would be
# required to handle one Kerberos realm for every DNS domain name. It is however
# possible to define only one realm for several DNS domains, by adding lines in
# the [domain_realm] section in /etc/krb5.conf, on every host. For instance, to
# use the CSG.IS.TITECH.AC.JP realm when accessing hosts in DNS domain
# csg.is.titech.ac.jp and all its sub-domains, the following two lines must be
# added:
#
# [domain_realm]
# 	...
# 	.csg.is.titech.ac.jp = CSG.IS.TITECH.AC.JP
# 	csg.is.titech.ac.jp = CSG.IS.TITECH.AC.JP
# 
# An alternative and more centralized way to configure mappings between DNS
# domain names and Kerberos realms is to add Kerberos-specific entries into
# the DNS. Since DNS may be subject to spoofing, that method is less secure,
# and is not described in this document. 
#
# It is somewhat simpler to configure Kerberos clients if some Kerberos records
# are present in DNS. To do this in a BIND-controlled zone requires entries
# like the following. Here the DNS domain is example.com, and the Kerberos
# realm is EXAMPLE.COM.
#
# $ORIGIN example.com.
# _kerberos               TXT     "EXAMPLE.COM"
# $ORIGIN _tcp.example.com.
# _kerberos               SRV     0 0 88 kdc.example.com.
# _kerberos-adm           SRV     0 0 749 kdc.example.com.


#,-----------------------------------------------------------------------------
#|  Kerberos Terminology vs Microsoft Terminology (separated by "/")
#|
#|  KDC (Key Distribution Centre) / DC (Domain Controller)
#|  Realm / Domain
#|  Principal / Account (user, machine etc...)
#'-----------------------------------------------------------------------------



# NOTE1::For a multiple server scenario :
# krb5-kdc adds a commented-out line for kpropd to /etc/inetd.conf.  You
# will want to uncomment this on slave KDCs so that they can receive updates
# from the master, but leave it commented out on the master.
# NOTE2::We could also add pam_mkhomedir.so to our PAM config so that we
# can have automatic creation of home directories.  On squeeze this should
# be managed by pam-auth-update rather than manually editing the PAM config.

