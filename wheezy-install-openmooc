#!/bin/bash
# We must run this script as root
if [ "$USER" != "root" ]; then
        echo "Must be root to execute script..."
        exit 1
fi

# Check for valid IP.  Warn if only configured to 127.0.x.x
my_fqdn=`hostname -f`
my_host_ip=`grep $my_fqdn /etc/hosts | awk '{ print $1 }'`
echo ""
echo "Your fully qualified hostname is "$my_fqdn
echo "and your IP is "$my_host_ip
if [ "$my_host_ip" = "127.0.1.1" ] || [ "$my_host_ip" = "127.0.0.1" ]; then
	echo ""
	echo "You should really make your hostname resolve to a valid network IP."
	echo "This is required for many web apps and is generally a good idea."
	echo "To do this:"
	echo "1) edit your /etc/hosts file and make sure your hostname"
	echo "   resolves to an IP other than 127.x.x.x"
	echo "2) Your /etc/network/interfaces will need to match. eg. :"
	echo "   iface eth0 inet static"
	echo "     address 192.168.1.120"
	echo "     netmask 255.255.255.0"
	echo "     gateway 192.168.1.1"
	echo "To make this take effect : killall dhclient;ifdown eth0;ifup eth0"
	echo "'Ctrl-C' to exit or hit <enter> to continue..."
	read my_dummy_value 
fi

apt-get update
apt-get -y install wget simplesamlphp build-essential python-dev libpq-dev libpng12-dev libjpeg8-dev apache2 libapache2-mod-wsgi python-virtualenv git ffmpeg postgresql postgresql-client mongodb rabbitmq-server

## Indices to maintain for this database
#index objectClass                       eq,pres
#index ou,cn,mail,surname,givenname      eq,pres,sub
#index uidNumber,gidNumber,loginShell    eq,pres
#index uid,memberUid                     eq,pres,sub
#index nisMapName,nisMapEntry            eq,pres,sub

cd /etc/ldap/schema
mkdir openmooc
cd openmooc
wget http://www.rediris.es/ldap/esquemas/iris.schema
wget http://www.terena.org/activities/tf-emc2/docs/schac/schac-20061212-1.3.0.schema.txt
mv schac-20061212-1.3.0.schema.txt schac.schema

cat > eduperson.schema <<EOF
#
################################################################################
#
# dn: cn=schema
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.1
    NAME 'eduPersonAffiliation'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseIgnoreMatch
    SUBSTR caseIgnoreSubstringsMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15' )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.2
    NAME 'eduPersonNickname'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseIgnoreMatch
    SUBSTR caseIgnoreSubstringsMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15' )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.3
    NAME 'eduPersonOrgDN'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY distinguishedNameMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.12'
    SINGLE-VALUE )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.4
    NAME 'eduPersonOrgUnitDN'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY distinguishedNameMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.12' )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.5
    NAME 'eduPersonPrimaryAffiliation'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseIgnoreMatch
    SUBSTR caseIgnoreSubstringsMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15'
    SINGLE-VALUE )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.6
    NAME 'eduPersonPrincipalName'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseIgnoreMatch
    SUBSTR caseIgnoreSubstringsMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15'
    SINGLE-VALUE )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.7
    NAME 'eduPersonEntitlement'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseExactMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15' )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.8
    NAME 'eduPersonPrimaryOrgUnitDN'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY distinguishedNameMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.12'
    SINGLE-VALUE )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.9
    NAME 'eduPersonScopedAffiliation'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseIgnoreMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15' )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.10
    NAME 'eduPersonTargetedID'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseIgnoreMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15' )
 
#
################################################################################
#
attributeType ( 1.3.6.1.4.1.5923.1.1.1.11
    NAME 'eduPersonAssurance'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    EQUALITY caseIgnoreMatch
    SYNTAX '1.3.6.1.4.1.1466.115.121.1.15' )
 
#
################################################################################
#
objectClass ( 1.3.6.1.4.1.5923.1.1.2
    NAME 'eduPerson'
    DESC 'eduPerson per Internet2 and EDUCAUSE'
    AUXILIARY
    MAY ( eduPersonAffiliation $ eduPersonNickname $ eduPersonOrgDN $
          eduPersonOrgUnitDN $ eduPersonPrimaryAffiliation $
          eduPersonPrincipalName $ eduPersonEntitlement $
          eduPersonPrimaryOrgUnitDN $ eduPersonScopedAffiliation $
          eduPersonTargetedID $ eduPersonAssurance ) )
 
 
################################################################################
EOF

fusiondirectory-insert-schema -i eduperson.schema iris.schema schac.schema
LDAP_BASE_DN=`ldapsearch -Y EXTERNAL -H ldapi:/// -b cn=config olcSuffix | sed -n 's@^olcSuffix:[[:space:]]*@@p'`

sed -i "s@enable.saml20-idp.*@enable.saml20-idp\'             => true,@" /etc/simplesamlphp/config.php
sed -i "s@'session.cookie.domain' => NULL@'session.cookie.domain' => '."`hostname --domain`"'@" /etc/simplesamlphp/config.php
sed -i "s@'language.available'.*@'language.available'    => array('en', 'es'),@" /etc/simplesamlphp/config.php
sed -i "s@'language.rtl'.*@'language.rtl'          => array(),@" /etc/simplesamlphp/config.php
ln -s /etc/apache2/conf-available/simplesamlphp.conf /etc/apache2/conf.d/simplesamlphp.conf
sed -i "s@'example-ldap'@'ldap'@" /etc/simplesamlphp/authsources.php
sed -i "s@'ldap.example.org'@'"ldaps://`hostname --fqdn`"'@" /etc/simplesamlphp/authsources.php
sed -i "s@'dnpattern' => 'uid=%username%,ou=people,dc=example,dc=org',@'dnpattern' => 'uid=%username%,ou=people,"$LDAP_BASE_DN"',@" /etc/simplesamlphp/authsources.php
sed -i "s@'search.base' => 'ou=people,dc=example,dc=org',@'search.base' => 'ou=people,"$LDAP_BASE_DN"',@" /etc/simplesamlphp/authsources.php

# NOTE: I needed to escape the "$" character with "\" to get
#       it to output from this script correctly.  I will also need to do
#       this with all subsequent files later in this script.
cat > /etc/simplesamlphp/metadata/saml20-idp-hosted.php <<EOF
<?php

\$metadata['https://`hostname --fqdn`/simplesaml/saml2/idp/metadata.php'] = array(

  'host' => '`hostname --fqdn`',

  'OrganizationName' => array(
      'en' => 'OpenMOOC',
  ),
  'OrganizationURL' => array(
      'en' => 'http://`hostname --fqdn`',
  ),

  'certificate' => '/etc/ssl/certs/ssl-cert-snakeoil.pem',
  'privatekey' => '/etc/ssl/private/ssl-cert-snakeoil.key',

   // The authentication source for this IdP. Must be one
   // from config/authsources.php.
  'auth' => 'ldap',

  // Logout requests and logout responses sent from this IdP should be signed
  'redirect.sign' => TRUE,
  // All communications are encrypted
  'assertion.encryption' => TRUE,

  // This filter eliminate the userPassword from the metadata that will be sent to the diferents components
  'authproc' => array(
          100 => array(
              'class' => 'core:PHP',
              'code' => '
                      if (isset(\$attributes["userPassword"])) {
                              unset(\$attributes["userPassword"]);
                      }
              ',
          ),
  ),
);

?>
EOF

cat > /usr/share/simplesamlphp/config/config-metarefresh.php <<EOF
<?php

\$config = array(

      'sets' => array(

              'askbots' => array(
                      'cron'          => array('metarefresh'),
                      'sources'       => array(
                              array(
                                      'src' => 'https://questions.example.com/m/group-metadata.xml',
                              ),
                      ),
                      'expireAfter'   => 60*60*24*4, // Maximum 4 day cache time.
                      'outputDir'     => 'metadata/askbots/',
                      'outputFormat' => 'flatfile',
              ),
              'moocng' => array(
                      'cron'          => array('metarefresh'),
                      'sources'       => array(
                              array(
                                      'src' => 'https://moocng.example.com/saml2/metadata/',
                              ),
                      ),
                      'expireAfter'   => 60*60*24*4, // Maximum 4 day cache time.
                      'outputDir'     => 'metadata/moocng/',
                      'outputFormat' => 'flatfile',
              ),
      ),
);

?>

EOF

cd /usr/share/simplesamlphp
touch /usr/share/simplesamlphp/modules/cron/enable
cp /usr/share/simplesamlphp/modules/cron/config-templates/module_cron.php /usr/share/simplesamlphp/config/
RANDOM_PASSWD=`openssl rand -base64 15|tr -dc _A-Z-a-z-0-9`
sed -i "s@'key'.*@'key' => '$RANDOM_PASSWD',@" /usr/share/simplesamlphp/config/module_cron.php
touch /usr/share/simplesamlphp/modules/metarefresh/enable

echo '01 * * * * root curl --silent "https://'`hostname --fqdn`'/simplesaml/module.php/cron/cron.php?key='$RANDOM_PASSWD'&tag=metarefresh" > /dev/null 2>&1' > /etc/cron.d/metarefresh

mkdir /etc/simplesamlphp/metadata/askbots/
mkdir /etc/simplesamlphp/metadata/moocng/

sed -i "s@^[ \t]*array('type' \=> 'flatfile'),@		array('type' \=> 'flatfile'),\n\
      array('type' \=> 'flatfile', 'directory' \=> 'metadata/askbots'),\n\
      array('type' \=> 'flatfile', 'directory' \=> 'metadata/moocng'),@" /etc/simplesamlphp/config.php

cd /usr/share/simplesamlphp/modules
git clone https://github.com/OpenMOOC/userregistration.git
git clone https://github.com/OpenMOOC/sspopenmooc.git

# We raid Fusion Directory's config file, and examine our network config for
# values we need to configure Argonaut :
LDAP_ADMIN_DN=`grep 'adminDn="' /etc/fusiondirectory/fusiondirectory.conf | awk -F'"' '{ print $2 }' #| awk -F',' '{ print $1 }'`
echo "LDAP admin dn extracted from /etc/fusiondirectory/fusiondirectory.conf"
LDAP_ADMIN_PW=`grep 'adminPassword="' /etc/fusiondirectory/fusiondirectory.conf | awk -F'"' '{print $2 }'`
echo "LDAP admin password extracted from /etc/fusiondirectory/fusiondirectory.conf"

cat > /usr/share/simplesamlphp/config/module_userregistration.php << EOF
<?php

\$config = array (

      'auth' => 'ldap',
      'user.realm' => '`hostname --domain`',
      'system.name' => 'OpenMOOC',

      // Mailtoken valid for 5 days
      'mailtoken.lifetime' => (3600*24*6),
      'mail.from'     => 'OpenMOOC <no-reply@example.com>',
      'mail.replyto'  => 'OpenMOOC <no-reply@example.com>',
      'mail.subject'  => 'OpenMOOC - verification',

      // URL of the Terms of Service
      'tos' => 'https://`hostname --fqdn`/simplesaml/module.php/userregistration/TOS.txt',

      'custom.navigation' => TRUE,   // Let it as TRUE

      'storage.backend' => 'LdapMod',

      // LDAP backend configuration
      // This is configured in authsources.php
      // FIXME: The name of this arrays shoud be the same as storage.backend value
      'ldap' => array(
              'admin.dn' => '$LDAP_ADMIN_DN',
              'admin.pw' => '$LDAP_ADMIN_PW',   // Set the correct ldap admin password

              // Storage User Id indicate which of the attributes
              // that is the key in the storage
              // This relates to the attributs mapping
              'user.id.param' => 'uid',

              // Password encryption
              // plain, md5, sha1
              'psw.encrypt' => 'md5',

              // Field user to save the registration email of the user
              'user.register.email.param' => 'mail',

              // Fields that contain a valid email to recover the password
              // (Sometimes is needed to be able to send recover password mail to a different email than the register email,
              //  For example if the Mail-System of the registered mail is protected by the IdP)
              'recover.pw.email.params' => array('mail'),
              // Password policy
              'password.policy' => array(
                      'min.length' => 5,
                      'require.lowercaseUppercase' => false,
                      'require.digits' => true,
                      // Require that password contains a non alphanumeric letter.
                      'require.any.non.alphanumerics' => false,
                      // Check if password contains the user values of the params of the array. Empty array to don't check
                      'no.contains' => array(),
                      // Dictionay filenames inside hooks folder. Empty array to don't check
                      'check.dicctionaries' => array(),
              ),

              // LDAP objectClass'es
              'objectClass' => array(
                      'inetOrgPerson',
                      'person',
                      'top',
                      'eduPerson',
              ),
      ), // end Ldap config

      // AWS SimpleDB configuration

      // SQL backend configuration

      // Password policy enforcer
      // Inspiration and backgroud
      // http://www.hq.nasa.gov/office/ospp/securityguide/V1comput/Password.htm

      // Mapping from the Storage backend field names to web frontend field names
      // This also indicate which user attributes that will be saved
      'attributes'  => array(
              'cn' => 'cn',
              'sn' => 'sn',
              'mail' => 'mail',
      ),

      // Configuration for the field in the web frontend
      // This controlls the order of the fields
      'formFields' => array(
              'cn' => array(
                  'validate' => FILTER_DEFAULT,
                  'layout' => array(
                      'control_type' => 'text',
                      'show' => true,
                      'read_only' => false,
                      'size' => '35',
                  ),
              ),
              'sn' => array(
                      'validate' => FILTER_DEFAULT,
                      'layout' => array(
                              'control_type' => 'text',
                              'show' => true,
                              'read_only' => false,
                      ),
              ),
              'mail' => array(
                      'validate' => FILTER_VALIDATE_EMAIL,
                      'layout' => array(
                              'control_type' => 'text',
                              'show' => false,
                              'read_only' => true,
                      ),
              ),
              'eduPersonAffiliation' => array(
                  'validate' => FILTER_DEFAULT,
                  'layout' => array(
                      'control_type' => 'text',
                      'show' => false,
                      'read_only' => true,
                  ),
              ),
              'userPassword' => array(
                      'validate' => FILTER_DEFAULT,
                      'layout' => array(
                              'control_type' => 'password',
                      ),
              ),
              'pw1' => array(
                      'validate' => FILTER_DEFAULT,
                      'layout' => array(
                              'control_type' => 'password',
                      ),
              ),
              'pw2' => array(
                      'validate' => FILTER_DEFAULT,
                      'layout' => array(
                              'control_type' => 'password',
                      ),
              ),
              'oldpw' => array(
                      'validate' => FILTER_DEFAULT,
                      'layout' => array(
                              'control_type' => 'password',
                      ),
              ),
      ),

);
?>
EOF
touch /usr/share/simplesamlphp/modules/userregistration/enable

cat > /usr/share/simplesamlphp/config/module_sspopenmooc.php << EOF
<?php

// Domain of our MoocNG component
\$mooc_domain = '`hostname --fqdn`';

// Domain of the IdP
\$idp_domain = '`hostname --fqdn`';

\$config = array(

      'urls' => array (
              'site' => 'https://'.\$mooc_domain,
              'login' => "https://\$mooc_domain/saml2/login/",
              'logout' => "https://\$mooc_domain/saml2/logout/",
              'register' => "https://\$idp_domain/simplesaml/module.php/userregistration/newUser.php",
              'forgotpassword' => "https://\$idp_domain/simplesaml/module.php/userregistration/lostPassword.php",
              'changepassword' => "https://\$idp_domain/simplesaml/module.php/userregistration/changePassword.php",
              'profile' => "https://\$idp_domain/simplesaml/module.php/userregistration/reviewUser.php",
              'legal' => "https://\$mooc_domain/legal",
              'tos' => "https://\$mooc_domain/legal/#tos",
              'copyright' => "#",
      ),

      // Internal file (Ex.  default.css)  or external (Ex. //example.com/css/default.css)
      // (Notice that // will respect the http/https protocol,
      //  load elements with different protocol than main page produce warnings on some browser)
      'cssfile' => 'default.css',
      'bootstrapfile' => 'bootstrap.css',
      'imgfile' => 'logo.png',
      'title' => 'OpenMOOC',
      'slogan' => 'Knowledge for the masses',
);
?>
EOF

sed -i "s@'theme.use'[ \t]*\=> 'default',@'theme.use'		\=> 'sspopenmooc:openmooc',@" /etc/simplesamlphp/config.php

cd /usr/share/simplesamlphp
patch -p0 < modules/sspopenmooc/session_logged_patch.diff
sed -i 's@openmooc.org@'`hostname --domain`'@' /usr/share/simplesamlphp/lib/SimpleSAML/XHTML/Template.php

# cp /usr/share/simplesamlphp/modules/sanitycheck/config-templates/config-sanitycheck.php /usr/share/simplesamlphp/config/config-sanitycheck.php
## Sanitycheck requires enabling cron module.

# FIXME: not sure if this is required.  Log file didn't seem to be created
touch /var/log/simplesamlphp/simplesamlphp.log
chmod 660 /var/log/simplesamlphp/simplesamlphp.log


virtualenv /var/www/moocng
source /var/www/moocng/bin/activate
cd /var/www/moocng
git clone https://github.com/OpenMOOC/django-tastypie.git
cd django-tastypie
python django-tastypie/setup.py develop
cd /var/www/moocng
git clone https://github.com/OpenMOOC/moocng.git
#FIXME: django-admin-sortable==1.3.8 to 1.4...  The older version isn't available.
#       Is this bad?
sed -i "s@django-admin-sortable==1.3.8@django-admin-sortable==1.4@" /var/www/moocng/moocng/setup.py
python moocng/setup.py develop
#FIXME: There's a "maximum recursion depth error" here...
#       Running setup.py twice gets past it(???).  This could be bad too.
python moocng/setup.py develop
# Required???
easy_install moocng

PG_PASSWD=`openssl rand -base64 15|tr -dc _A-Z-a-z-0-9`
sudo -u postgres createuser moocng --no-createrole --no-createdb --no-superuser
sudo -u postgres sh -c "psql -d template1 -c 'ALTER USER moocng WITH PASSWORD '\'$PG_PASSWORD\'';'"
sudo -u postgres createdb -E UTF8 --owner=moocng moocng

sed -i 's@^local.*all.*all.*peer.*$@local    moocng      moocng                         md5\
&@' /etc/postgresql/9.1/main/pg_hba.conf
/etc/init.d/postgresql restart
# DEBUG: To check the database is working you may want to connect to the database ie:
# psql -U moocng -W moocng

cat > /var/www/moocng/lib/python2.7/site-packages/moocng-0.0-py2.7.egg/local_settings.py <<-EOF
 DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.postgresql_psycopg2',
         'NAME': 'moocng',
         'USER': 'moocng',
         'PASSWORD': '$PG_PASSWD',
         'HOST': '',
         'PORT': '',
     }
 }
EOF

django-admin.py syncdb --settings=moocng.settings --migrate

rabbitmqctl add_user moocng moocngpassword
rabbitmqctl add_vhost moocng
rabbitmqctl set_permissions -p moocng moocng ".*" ".*" ".*"

cp /var/www/moocng/moocng/celeryd /etc/init.d/
#FIXME: The init.d script doesn't seem to work.  The error:
#       /etc/init.d/celeryd: 24: .: Can't open /etc/init.d/functions
chmod +x /etc/init.d/celeryd

django-admin.py collectstatic --settings=moocng.settings

echo "https://fusion.strategicit.homelinux.net/simplesamlphp"
#NOTE: Magic Quotes are no longer part of PHP v5.4, so we don't need to switch them off
