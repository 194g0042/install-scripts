#!/bin/bash
# FIXME : I've only JUST got this script working for me...  it's not tested AT
#         ALL, and probably does lots of wrong things.
# FIXME : The below overview is not correct...  need to update my comments as.
#         I refine this script.  HELP WELCOME!
# This shell script documents how to install Kolab + Horde using native Debian packages.
# WARNING : this experimental script is incomplete, and could destroy
# configuration and/or data.  It's best to read it, cut and paste small sections and
# observe the output.
#
# The Kolab+Horde installation process in summary :
# 1) Kolab, Horde and supporting software packages are installed
# 2) The Kolab bootstrap script is run to produce a Kolab configuration
# 3) Some final options need to be configured through the Kolab web interface.
#    This completes the Kolab portion of the configuration.
# 4) Enable Horde in Apache by placing config files in /etc/apache2/...
# 5) Change /etc/horde/... file permissions so configuring Horde via web
#    is possible.
# 6) Create Horde backend database.  This script uses PostgreSQL.
# 7) Edit /etc/horde/horde3/conf.php to open access to the web interface
# 8) Configure the Horde via web interface

if [ "$USER" != "root" ]; then
        echo "Must be root to execute script..."
        exit 1
fi

if [ ! -f /etc/gosa/gosa.conf ]; then
  echo "Run the squeeze-install-FusionDirectory script before this one.  GOsa must be"
  echo "installed and configured before we can continue..."
  exit 1
fi

# We want to make sure our list of packages is up to date...
aptitude update

# ...and then install kolab and dependencies.
# FIXME: Do I ever want to use postgres instead of SQLite?  If so we would
# include : php5-pgsql postgresql-8.3
# FIXME: php-auth-sasl is not yet pulled in as a dependency and I THINK it should be.
#        Confirm, report a bug, then remove this note.
apt-get install -y --allow-unauthenticated kolabd postfix fusiondirectory-plugin-kolab fusiondirectory-plugin-kolab-schema fusiondirectory-plugin-connectivity ldap-utils php-auth-sasl wget

# Until kolab-webclient becomes part of Debian Squeeze we have to install its
# dependencies, then download the deb from a separate source and install it.
# FIXME: After kolab-webclient becomes part of Debian Squeeze we can delete the
#        following and download everything from the repos in the step above.
apt-get install dimp1 imp4 ingo1 kronolith2 mnemo2 nag2 sork-passwd-h3 turba2 php5-sqlite sqlite php-net-sieve libsqlite0
cd /usr/src
wget ftp://ftp.us.debian.org/debian/pool/main/k/kolab-webclient/kolab-webclient_1.2.0*.deb
dpkg -i kolab-webclient_1.2.0*.deb

# FIXME: Perhaps we should also install amavis here?

# We need to fill some environment variables with config values we'll need
# later.  The last one needs to come from LDAP so we get it before we shut
# down slapd.
LDAP_BASE_DN=`grep '^suffix ' /etc/ldap/slapd.conf | awk '/ */{ print $2 }' | sed 's/"//g'`
LDAP_ADMIN_DN=`grep 'adminDn="' /etc/fusiondirectory/fusiondirectory.conf | awk -F'"' '{ print $2 }'`
LDAP_ADMIN_PW=`grep 'adminPassword="' /etc/fusiondirectory/fusiondirectory.conf | awk -F'"' '{print $2 }'`
LDAP_ADMIN_HASH=`ldapsearch -D cn=admin,dc=strategicit,dc=homelinux,dc=net -w $LDAP_ADMIN_PW uid=admin | grep userPassword - | awk -F' ' '{print$2}'`

# Stop all Kolab related daemons so we can modify configuration.
/etc/init.d/apache2 stop
/etc/init.d/kolabd stop
/etc/init.d/kolab-cyrus stop
/etc/init.d/postfix stop
/etc/init.d/saslauthd stop
/etc/init.d/slapd stop
/etc/init.d/amavis stop #optionally

# The kolab.conf configuration file doesn't exist yet so we begin populating it
echo "fqdnhostname : "`hostname -f` > /etc/kolab/kolab.conf

# FIXME: Apparently we don't need the master info if we manage openldap outside
#        of kolab.  Do we need to keep this option in however?
echo "is_master : true" >> /etc/kolab/kolab.conf

echo ""
echo "Please enter a password for the Kolab 'manager' user :"
read MANAGER_PW

# We'll need to generate some passwords for the internal "nobody" and "calendar"
# users that Kolab uses internally.
NOBODY_PW=`openssl rand -base64 30`
CALENDAR_PW=`openssl rand -base64 30`

# We need to encrypt or "hash" these passwords for storage in LDAP.
# FIXME: We should parse gosa.conf and work out the kind of hash to use.
# -c = salt format.  For cryptmd5 this is $1$%.8s
# -n = omit trailing newline (this may be useful)
NOBODY_HASH=`slappasswd -s "$NOBODY_PW" -h {MD5} -c '$1$%.8s' -n`
CALENDAR_HASH=`slappasswd -s "$CALENDAR_PW" -h {MD5} -c '$1$%.8s' -n`

# Kolab combines cyrus, postfix and a number of other components into a
# coherent whole.  The heart of Kolab is the kolab.conf file.  This file
# contains many configuration options which are combined with templates in
# the /etc/kolab/templates directory to build the many configuration files
# required by the individual components comprising a Kolab system.

#  Below we build our kolab.conf file :
echo "base_dn : "$LDAP_BASE_DN >> /etc/kolab/kolab.conf
# Kolab's default for bind_dn is 
# cn=manager,cn=internal,dc=strategicit,dc=homelinux,dc=net .  Why?
# Is this simply the admin LDAP user?
echo "bind_dn : cn=manager,cn=internal,"$LDAP_BASE_DN >> /etc/kolab/kolab.conf 
echo "bind_pw : "$MANAGER_PW >> /etc/kolab/kolab.conf
# I'm not sure about the below value.  Kolab generates a prefix eg. {SSHA} in front of its hash.
# My hash doesn't seem to have this prefix.
echo "bind_pw_hash : "$LDAP_ADMIN_HASH >> /etc/kolab/kolab.conf
echo "ldap_uri : ldaps://127.0.0.1:636" >> /etc/kolab/kolab.conf
echo "ldap_master_uri : ldaps://127.0.0.1:636" >> /etc/kolab/kolab.conf
echo "php_dn : cn=nobody,cn=internal,"$LDAP_BASE_DN >> /etc/kolab/kolab.conf
echo "php_pw : "$NOBODY_PW >> /etc/kolab/kolab.conf
echo "calendar_id : calendar" >> /etc/kolab/kolab.conf
echo "calendar_pw : "$CALENDAR_PW >> /etc/kolab/kolab.conf
echo "slurpd_addr : 127.0.0.1" >> /etc/kolab/kolab.conf
echo "slurpd_port : 9999" >> /etc/kolab/kolab.conf
# FOR TROUBLESHOOTING
# Include "debug : 1" into /etc/kolab/kolab.conf to show debugging info.
# You can run kolabd from the commandline as root, or examine the log
# for debugging info.

chown kolab.kolab /etc/kolab/kolab.conf
chmod 600 /etc/kolab/kolab.conf

# FIXME: I'll mention a rare case that could cause problems : if the server
# runs both kolab and an approx apt proxy there will be a port collision
# on port 9999.  Configure either the slurpd_port in /etc/kolab/kolab.conf
# or the approx port to be different.  Should we check for approx and warn?

## Configure Kolab certificates for the Kolab apache interface (used for freebusy,
## webadmin etc...)
# FIXME: Should we disable kolab-webadmin?

# Apache needs access to our ssl certificates.
usermod -G ssl-cert www-data
# FIXME: Should we create unique certs for Kolab?
sed  -i -e "s@/etc/kolab/cert.pem@/etc/ssl/certs/ssl-cert-snakeoil.pem@" /etc/kolab/apache.conf
sed  -i -e "s@/etc/kolab/key.pem@/etc/ssl/private/ssl-cert-snakeoil.key@" /etc/kolab/apache.conf

# Postfix also needs access to certs.  We don't modify /etc/postfix/main.cf directly,
# but instead modify /etc/kolab/templates/main.cf.template - this file is copied
# periodically over the normal config file by the 'kolabconf' script.
# NOTE:: Kolabconf creates certs in /etc/kolab/, but we don't use these.
sed -i "s@#smtpd_tls_CAfile = /etc/kolab/server.pem@smtpd_tls_CAfile = /etc/ssl/certs/ssl-cert-local-ca.pem@" /etc/kolab/templates/main.cf.template
sed -i "s@/etc/kolab/cert.pem@/etc/ssl/certs/ssl-cert-snakeoil.pem@" /etc/kolab/templates/main.cf.template
sed -i "s@/etc/kolab/key.pem@/etc/ssl/private/ssl-cert-snakeoil.key@" /etc/kolab/templates/main.cf.template

echo "### Kolab stuff ###" >> /etc/ldap/slapd.conf
echo "include         /etc/ldap/schema/rfc2739.schema" >> /etc/ldap/slapd.conf
echo "include         /etc/ldap/schema/gosa/kolab2.schema" >> /etc/ldap/slapd.conf

## FIXME: Are these correct???  Are they all that are required???
# index   gosaMailAlternateAddress,gosaMailForwardingAddress     eq
# index   gosaSubtreeACL,gosaObject,gosaUser                     pres,eq

## FIXME: These are slapd ACL's.  Are they correct and should they even be
##        in this script????
## FIXME: Should we insert these ACLs into a more appropriate part of the
##        config file???  Which is an appropriate place???
## FIXME: We need a short explanation of ACLs here.

# NOTE: ACLs are very sensitive to whitespace.  The "by" lines need to be
#       indented, and there can't be spaces at the end of lines.
cat >> /etc/ldap/slapd.conf << EOF
#### Provide the modern syncprov/syncrepl method of ldap replication
# This database is a synchronisation provider
# Note that a database can be both a consumer and a provider
moduleload      syncprov
overlay syncprov
# Guarantee that contextCSN gets written.
syncprov-checkpoint  1024 16
# Save a log of last write operations
syncprov-sessionlog 4096
# Support delta-based syncrepl
syncprov-reloadhint TRUE
# Put an index on attributes used for synchronisation
# Note that these indexes are used locally both for server and client
# during synchronisation.
index entryCSN eq
index entryUUID eq

#replica uri=ldap://127.0.0.1:9999
#    binddn="cn=replicator"
#    bindmethod=simple
#    credentials=secret

#### Using overlays to improve data consistency
# Ensure that we never get dangling member attributes
# Checked on rename and delete
moduleload refint
overlay refint
refint_attributes member

# The mail and the uid attribute must be unique.
moduleload unique
overlay unique
unique_attributes mail uid


### Added to speed some operations with Kolab
index   alias           approx,sub,pres,eq
index   kolabDelegate   approx,sub,pres,eq
index   kolabHomeServer pres,eq
index   kolabDeleteflag pres,eq
index   member          pres,eq

################################################
# ACLs for Kolab
access to attrs=goImapPassword
	by dn="cn=admin,cn=internal,$LDAP_BASE_DN" write
	by * none

access to attrs=goKrbPassword
	by dn="cn=admin,cn=internal,$LDAP_BASE_DN" write
	by * none

access to attrs=goFaxPassword
	by dn="cn=admin,cn=internal,$LDAP_BASE_DN" write
	by * none

access to attrs=gotoLastUser
	by * write
EOF
# TROUBLESHOOTING : Sync logging can be activated by setting loglevel to
# 0x4000 (see man slapd.conf).

# Start services (slapd needs to be started so we can add an ldif to our tree).
/etc/init.d/slapd start
# FIXME: Do we need to start apache???
/etc/init.d/apache2 start

# If there are issues starting or connecting to LDAP try running slapd from
# the commandline.  The -d switch specifies debugging...  specify the debug
# level required eg :
# slapd -d 1 -f /etc/ldap/slapd.conf

# FIXME: There are some useful extras we can pull from gosa.conf to help
#        create our user/s (although is this only for POSIX?) ie.
#        * userRDN="ou=people"
#        * groupRDN="ou=groups"
#        * uidNumberBase="2000"
#        * gidNumberBase="2000"
#        * accountPrimaryAttribute="cn"
#        * passwordDefaultHash="crypt/md5"
# 

DOMAIN=`hostname --domain`
FQDN=`hostname --fqdn`

# Create kolab-manager, kolab-nobody and kolab-calendar users for the correct
# operation of Kolab.  FIXME: Is creating temp files the best way to do this?
# FIXME: We are yet to handle password hashes.
# FIXME: Should we supply a more intelligent value for postfix-mynetworks
#        and/or instruct the user on how to modify this value.
cat > /tmp/new-ldap-users.ldif <<-EOF
	dn: k=kolab,$LDAP_BASE_DN
	k: kolab
	kolabHost: $FQDN
	postfix-mydomain: $DOMAIN
	#postfix-relaydomains:
	postfix-mydestination: $DOMAIN
	postfix-mynetworks: 127.0.0.0/8
	#postfix-relayhost:
	#postfix-transport:
	cyrus-autocreatequota: 100000
	cyrus-quotawarn: 80
	cyrus-admins: manager
	cyrus-imap: TRUE
	cyrus-pop3: FALSE
	cyrus-imaps: TRUE
	cyrus-pop3s: TRUE
	cyrus-sieve: TRUE
	apache-http: FALSE
	apache-allow-unauthenticated-fb: FALSE
	uid: freebusy
	userPassword: freebusy
	objectClass: top
	objectClass: kolab

	dn: cn=internal,$LDAP_BASE_DN
	cn: internal
	objectClass: top
	objectClass: kolabNamedObject

	# FIXME:
	# Why are the next three objects here?  ie. external,groups,resources?
	# Are these even required in GOsa???
	dn: cn=external,$LDAP_BASE_DN
	cn: external
	objectClass: top
	objectClass: kolabNamedObject

	dn: cn=groups,$LDAP_BASE_DN
	cn: groups
	objectClass: top
	objectClass: kolabNamedObject

	dn: cn=resources,$LDAP_BASE_DN
	cn: resources
	objectClass: top
	objectClass: kolabNamedObject

	dn: cn=domain-maintainer,cn=internal,$LDAP_BASE_DN
	cn: domain-maintainer
	objectClass: top
	objectClass: kolabGroupOfNames
	objectClass: groupOfNames
	member: cn=manager,cn=internal,$LDAP_BASE_DN

	dn: cn=domains,cn=internal,$LDAP_BASE_DN
	cn: domains
	objectClass: top
	objectClass: kolabNamedObject

	dn: cn=admin,cn=internal,$LDAP_BASE_DN
	cn: admin
	objectClass: top
	objectClass: kolabGroupOfNames
	objectClass: groupOfNames
	member: cn=manager,cn=internal,$LDAP_BASE_DN


	dn: cn=manager,cn=internal,$LDAP_BASE_DN
	sn: Manager
	givenName: Kolab
	uid: manager
	cn: manager
	objectClass: top
	objectClass: person
	#objectClass: organizationalPerson
	objectClass: inetOrgPerson
	objectClass: kolabinetOrgPerson
	#objectClass: gosaAccount

	dn: cn=calendar,cn=internal,$LDAP_BASE_DN
	sn: Calendar
	givenName: Kolab
	uid: calendar
	cn: calendar
	objectClass: top
	objectClass: person
	#objectClass: organizationalPerson
	objectClass: inetOrgPerson
	objectClass: kolabinetOrgPerson
	#objectClass: gosaAccount

	dn: cn=nobody,cn=internal,$LDAP_BASE_DN
	sn: Nobody
	givenName: Kolab
	uid: nobody
	cn: nobody
	objectClass: top
	objectClass: person
	#objectClass: organizationalPerson
	objectClass: inetOrgPerson
	objectClass: kolabinetOrgPerson
	#objectClass: gosaAccount
EOF



# -x - use simple authentication instead of SASL FIXME: Does this make a difference?
#ldapadd -H <ldap uri> -x -D <binddn> -w <passwd> -f /tmp/new-ldap-user.ldif
ldapadd -H ldaps://127.0.0.1:636 -x -D $LDAP_ADMIN_DN -w $LDAP_ADMIN_PW \
  -f /tmp/new-ldap-users.ldif

# Set the "nobody", "manager" and "calendar" user passwords
ldappasswd -H ldaps://127.0.0.1:636 -x -D $LDAP_ADMIN_DN -w $LDAP_ADMIN_PW \
  -s $NOBODY_PW cn=nobody,cn=internal,$LDAP_BASE_DN
ldappasswd -H ldaps://127.0.0.1:636 -x -D $LDAP_ADMIN_DN -w $LDAP_ADMIN_PW \
  -s $CALENDAR_PW cn=calendar,cn=internal,$LDAP_BASE_DN
ldappasswd -H ldaps://127.0.0.1:636 -x -D $LDAP_ADMIN_DN -w $LDAP_ADMIN_PW \
  -s $MANAGER_PW cn=manager,cn=internal,$LDAP_BASE_DN

# NOTES on ldif : the cyrus-* attributes in the k=kolab object are put into the
# cyrus config by kolabconf.  Kolabconf uses ldap values and the files in
# /etc/kolab/templates to generate configurations.  The postfix-* ldap values
# would be the same, and also apache-*.  I should find out and note what these
# other values are for.

# FIXME: Add passwords in ldif above, or do we use ldappasswd?

rm /tmp/new-ldap-users.ldif

# We need to give Kolabs "manager" user ability to eg. add/remove mail
# attributes from users.  We give full write privleges on the entire
# LDAP tree.
# FIXME: Should we instead limit the "manager" users privleges?
sed -i 's@^ .*by dn="cn=admin,dc=.*$@&\
        by dn="cn=manager,cn=internal,'$LDAP_BASE_DN'" write@' /etc/ldap/slapd.conf

###### END Issues with Fusion Directory and Cyrus IMAP ######
# We don't use auxprop auth, but saslauthd for LDAP authentication (see
# discussion above), and therefore we must also force PLAIN authentication
# only.  For security we really should do this over an encrypted channel
# which is what we have with LDAP over TLS.
# I've also set the altnamespace option to "yes" so extra folders 
# (eg. Trash, Sent, Junk etc...) appear at the same level as our INBOX folder
# and won't show up inside it - look up the Cyrus documentation for the
# implications of this.
if grep "sasl_pwcheck_method: saslauthd" /etc/imapd.conf; then
	echo "/etc/imapd.conf already configured"
else
	echo "/etc/imapd.conf unconfigured.  Configuring..."
	if sed -i 's/sasl_pwcheck_method:\ auxprop/sasl_pwcheck_method:\ saslauthd/' /etc/imapd.conf; then
		echo "Finished changing sasl_pwcheck_method."
	else
		echo "Failed changing sasl_pwcheck_method.  Exiting..."
		exit 1
	fi
	if sed -i 's/#sasl_mech_list: PLAIN/sasl_mech_list: PLAIN/' /etc/imapd.conf; then
		echo "Finished uncommenting sasl_mech_list!"
	else
		echo "Failed uncommenting sasl_mech_list.  Exiting..."
		exit 1	
	fi
	if sed -i 's/altnamespace: no/altnamespace: yes/' /etc/imapd.conf; then
		echo "Finished changing altnamespace option to yes!"
	else
		echo "Failed changing altnamespace option to yes.  Exiting..."
		exit 1	
	fi
fi

# Add the cyrus user to ssl-cert group so the Cyrus daemon can read the ssl key
# required for enabling encryption.
usermod -a -G ssl-cert cyrus

# FIXME: Is what I say below correct???  /var/run/saslauthd/mux seems to be owned
# by user root and group root.  The cyrus user needs to be added to the sasl
# group for things to work though...  (END FIXME).
# Add cyrus user to sasl group so the Cyrus daemon can access the saslauthd mux.
usermod -a -G sasl cyrus

## FIXME: We can only login with email addresses as usernames as yet.  Here are some notes :
## We want to allow logins without requiring the user to specify a domain,
## so I tried adding a default domain to our cyrus and horde configurations.
## I THINK modification of Horde code is also required (from google searching).
#sed -i "s@#defaultdomain:@defaultdomain: `hostname --domain`" /etc/imapd.conf
#
#sed -i -e "s/^\(.*problems.*email.*=\).*;/\1 'admin@`hostname --domain`';/" /etc/kolab-webclient/horde3/conf.php
#sed -i -e "s/^\(.*problems.*maildomain.*=\).*;/\1 '`hostname --domain`';/" /etc/kolab-webclient/horde3/conf.php

# We now make four changes to saslauthd configuration :

# 1) Enable automatic start of saslauthd (disabled by default)
if sed -i s/START=no/START=yes/ /etc/default/saslauthd; then
	echo "START= value in /etc/default/saslauthd changed to 'yes'..."
else
	echo "Failed to modify START= value in /etc/default/saslauthd.  Exiting..."
	exit 1
fi

# 2) Saslauthd auths using LDAP and not PAM
#
# We could authenticate using PAM or LDAP.  (What are the pros/cons?).
# In this script we are using LDAP.
# There is an example of how to auth via PAM in the Samba script.  Be aware
# that the Samba script changes global PAM settings for the system and not
# for individual services; if we were to use PAM we might only want to
# configure PAM auth for IMAP.
if sed -i 's/^MECHANISMS="pam"/MECHANISMS="ldap"/' /etc/default/saslauthd; then
	echo "MECHANISMS variable in /etc/default/saslauthd changed to 'ldap'..."
else
	echo "Failed to modify MECHANISMS value in /etc/default/saslauthd.  Exiting..."
	exit 1
fi

# 3) The LDAP auth method requires a configuration file, so we specify this
echo 'PARAMS="-O /etc/saslauthd.conf"' >> /etc/default/saslauthd

# 4) Create /etc/saslauthd.conf and populate with LDAP connection info :
echo "ldap_servers:     ldaps://localhost/
ldap_version:     3
ldap_timeout:     10
ldap_time_limit:  10
ldap_bind_dn: "$LDAP_ADMIN_DN"
ldap_password: "$LDAP_ADMIN_PW"
ldap_scope:       sub
ldap_search_base: "$LDAP_BASE_DN"
ldap_auth_method: bind

# We can have Cyrus accept either an email address or a username for a login id.
# You will need to choose an appropriate ldap_filter below, and modify gosa.conf
# to match this choice (ie. mailAttribute must be either uid or mail).
# EXPERIMENT: I've put a filter which accepts either mail OR uid.  Does it work?
ldap_filter: (&(|(mail=%u@%d)(mail=%u)(uid=%u@%d)(uid=%u))(!(kolabdeleteflag=*)))
#ldap_filter: uid=%u
#ldap_filter: mail=%s

# These files allow saslauthd to verify the certs of anyone who connects.
#FIXME: We should eventually create separate certs for all our services.
ldap_tls_cacert_file: /etc/ssl/certs/ssl-cert-local-ca.pem
ldap_tls_cert: /etc/ssl/certs/ssl-cert-snakeoil.pem
ldap_tls_key: /etc/ssl/private/ssl-cert-snakeoil.key" > /etc/saslauthd.conf

/etc/init.d/saslauthd restart

# To debug/test saslauthd use :
# testsaslauthd -u <username> -p <password>
#
# You can also run saslauthd from the commandline with the -d option to get debug
# information. eg :
# /usr/sbin/saslauthd -d -a ldap -m /var/run/saslauthd
# If while debugging you get a [reason=Unknown] in your debug output it
# is possible your /etc/saslauthd.conf is wrong/corrupt.

## FIXME: We might choose to use a certificate specific to Cyrus in future.
## We enable TLS in Cyrus here...  this is REQUIRED if we use the Toltec connector.
sed -i "s@^tls_cert_file: .*@tls_cert_file: /etc/ssl/certs/ssl-cert-snakeoil.pem@" /etc/kolab/templates/imapd.conf.template
sed -i "s@^tls_key_file: .*@tls_key_file: /etc/ssl/private/ssl-cert-snakeoil.key@" /etc/kolab/templates/imapd.conf.template
sed -i "s@^#tls_ca_file: .*@tls_ca_file: /etc/ssl/certs/ssl-cert-local-ca.pem@" /etc/kolab/templates/imapd.conf.template
# NOTE:: We need to comment out the tls_ca_path option because we're using a
#        GNUTLS-generated certificate, and tls_ca_path is not a valid option
#        when using the gnutls library.
sed -i "s@^tls_ca_path:@#tls_ca_path:@" /etc/kolab/templates/imapd.conf.template
##tls_require_cert: false

# Before running kolabconf we need to make sure it doesn't configure the wrong
# files.  Get rid of the templates we don't need :
rm /etc/kolab/templates/slapd.*.template
rm /etc/kolab/templates/ldap.conf.template
rm /etc/kolab/templates/saslauthd.conf.template
rm /etc/kolab/templates/kolab.conf.template
# !!! maybe !!!
#rm /etc/kolab/templates/php.ini.template
# FIXME: Do we need to get rid of any more???

echo "Running kolabconf..."
kolabconf
# If you have any problems running kolabconf you can add "debug : 1" to your
# /etc/kolab/kolab.conf which will print debug output to the commandline.

#### FIXME: Hordes admin GUI is not required.  Get rid of this???
## Now we configure the Kolab webadmin GUI.
## Three config options need to be tuned to our new Kolab installation -
## fqdnhostname, base_dn and php_pw.  We can use some script magic to read
## these values from /etc/kolab/kolab.conf, and write them to the webadmin
## config file - /etc/kolab-webadmin/session_vars.php .
#apt-get install php-net-ldap php-net-sieve kolab-webadmin
#
#sed -i -e "s@kolabserver.example.com@`grep '^fqdnhostname : ' /etc/kolab/kolab.conf | gawk '{ print $3 }'`@" /etc/kolab/session_vars.php
#sed -i -e "s@dc=example,dc=com@`grep '^base_dn : ' /etc/kolab/kolab.conf | gawk '{ print $3 }'`@" /etc/kolab/session_vars.php
#sed  -i -e "s@cn=nobody,cn=internal,dc=example,dc=com@`grep '^php_dn : ' /etc/kolab/kolab.conf | gawk '{ print $3 }'`@" /etc/kolab/session_vars.php
#sed  -i -e "s@PASSWORD@`grep '^php_pw : ' /etc/kolab/kolab.conf | gawk '{ print $3 }'`@" /etc/kolab/session_vars.php
#sed  -i -e "s@ldap://127.0.0.1:389@ldaps://127.0.0.1:636@" /etc/kolab/session_vars.php
#
## If the default-ssl apache site is left enabled it will prevent the Kolab admin site from working.
#a2dissite default-ssl
#/etc/init.d/apache2 restart

# FIXME: To enable Kolab a few steps are required.  Test.
sed -i 's@<serverservice>@<serverservice>\
    <tab class="servkolab" />@' /etc/fusiondirectory/fusiondirectory.conf
# FIXME: kolabAccount is actually commented out in gosa.conf.  Perhaps we
#        should uncomment it instead of re-adding.
sed -i 's@<connectivity>@<connectivity>\
    <tab class="kolabAccount" />@' /etc/fusiondirectory/fusiondirectory.conf
# Emable kolab22 mailMethod in gosa.conf
# FIXME: Is cyrusUseSlashes really required here?
if ! grep  'mailMethod=' /etc/fusiondirectory/fusiondirectory.conf; then
	sed -i 's@<location.*'\
'@&\
              mailMethod="kolab22"\
              cyrusUseSlashes="true"'\
'@' /etc/fusiondirectory/fusiondirectory.conf
	echo "Added a mailMethod entry to gosa.conf"
else
	echo ""
	echo "A mailMethod entry is already enabled in your gosa.conf ."
        echo "You will need to manually configure the Kolab mailmethod."
	echo "<Hit enter to continue...>"
fi

# To debug GOsa's interaction with email change 'debugLevel="0"' to
# 'debugLevel="512"'.  This will cause debug info to be printed in the
# GOsa pages.

## Add the cyrus user to ssl-cert group so the Cyrus daemon can read the ssl key
## required for enabling encryption.
usermod -a -G ssl-cert cyrus

# FIXME: The following is necessary because the
#        /etc/kolab/templates/cyrus.conf.template file is missing from the
#        kolab deb packages.  Kolab template files are usually used to generate
#        config files by merging the templates with values from
#        GOsa/LDAP+kolab.conf.  We must temporarily edit cyrus.conf by hand
#        until the template file is added back to the kolab debs.
# Enable pops and imaps and disable pop (in cyrus)
# NOTE:: I've left imap enabled.  Uncomment the following line to disable.
# sed -i 's@^\([[:space:]]*\)imap[ \t]@\1\#imap\t@' /etc/cyrus.conf
sed -i 's@\#imaps\([[:space:]]*\)cmd="imapd -s -U 30"@'\
'imaps\1cmd="imapd -s -U 30"@' /etc/cyrus.conf
sed -i 's@^\([[:space:]]*\)pop3[ \t]@\1\#pop3\t@' /etc/cyrus.conf
sed -i 's@\#pop3s\([[:space:]]*\)cmd="pop3d -s -U 30"@'\
'pop3s\1cmd="pop3d -s -U 30"@' /etc/cyrus.conf


# NOTE: The following libarary is packaged for Debian Squeeze, but not for
#       Lenny : http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=529754
#       For anyone using Lenny - you can install it using Pear :
#pear install Net_LDAP2-2.0.6

# Start all Kolab related daemons/etc/init.d/amavis stop #optionally
/etc/init.d/amavis start #optional
/etc/init.d/slapd start
/etc/init.d/saslauthd start
/etc/init.d/postfix start
/etc/init.d/kolab-cyrus start
/etc/init.d/kolabd start
/etc/init.d/apache2 start

# To test the sasl auth layer : testsaslauthd -u manager -p PASSWORD

# HORDE CONFIGURATION :

######### Only required when using Postgres ####################################
# Modify the Postgres database config in /etc/postgresql/8.3/main/pg_hba.conf
# to allow connections from your local machine.  Note:: If you wanted your
# PostgreSQL daemon on a separate box your config would instead allow a network
# connection.
#sed -i "s@Unix\ domain\ socket\ connections\ only@\
#Unix\ domain\ socket\ connections\ only\n\
#local\ \ horde\ \ horde\ \ md5\
#@" /etc/postgresql/8.3/main/pg_hba.conf
#
## Restart the postgresql daemon so the above change comes into effect
#/etc/init.d/postgresql-8.3 restart
#
## Now we need to create a database and database user for horde.
## The Debian package contains a zipped script which does all the steps required.
## We need to first modify this script so the database owners password isn't 'pass'.
## The command below unzips and modifies this script and then runs it.
## NOTE:: Edit out "put-password-here" and replace with a password
## for your horde database user.  The script will then prompt for this password
## during the database creation process.
#echo "Please enter horde database username:"
#read databasepw
#gunzip < /usr/share/doc/horde3/examples/scripts/sql/create.pgsql.sql.gz | \
#sed "s@--\ ALTER\ USER\ horde\ WITH\ PASSWORD\ 'pass';@\
#ALTER\ USER\ horde\ WITH\ PASSWORD\ \'$databasepw\';@" | \
#sudo -u postgres psql -f -
#####################################################################

echo "Successfully finished Kolab configuration..."
echo ""
echo "To enable GOsa/Kolab integration first create a 'IMAP/POP3 (Cyrus) service'"
echo "inside a GOsa server object, and enter the following values :"
echo "  Server identifier - "`hostname --fqdn`
echo "  Connect URL - {"`hostname --fqdn`":993/ssl/novalidate-cert} )"
echo "  Admin user - manager"
echo "  Password - <the password you recently chose for the manager user>"
echo "  Sieve connect URL - {127.0.1.1:4190/tls}"
echo "Next create a 'Kolab mail service'.  IMPORTANT: Disable Amavis unless"
echo "you manually install it.  You may also need to modify 'SMTP privileged"
echo "networks', 'SMTP smarthost/relayhost' and/or other settings."
echo "<After this is done type enter to continue...>"
read dummy_value
# FIXME: This should be automated :
# The sieve port above should be port 2000 on Lenny or port 4190 in Squeeze.
# This changed because of a clash with a port allocated to a Cisco service.
# FIXME: Get rid of the Amavis comment if/when we install the Amavis antivirus
#        and antispam daemon in our script.
# FIXME: Should we automate this somehow? :
# To modify the default logon language edit /etc/horde/horde3/nls.php eg. en_GB.
# I couldn't find an en_AU language defined in the source file.  Perhaps a php
# hacker could do this?

echo ""
echo "Installation complete.  If you want things to work read carefully :"
echo "IMPORTANT: 1) Mailbox creation with Kolab takes a couple of minutes, so"
echo "              don't worry about the initial missing mailbox warnings."
echo "              Restart kolabd to speed mailbox creation if required."
echo "           2) You MUST log into Horde using your EMAIL ADDRESS as your"
echo "              username!  (How can I disable anything else)?"
echo "Please check the following page for any known issues with the current"
echo "Debian Kolab packages."
echo "http://wiki.kolab.org/index.php/Debian_-_Administrators_-_Known_issues"
echo "Your Horde web client will be located here:"
echo "https://"`hostname --fqdn`"/horde3"


#  FIXME: The following will probably change.  Update when it does :
#  This is a temporary apt repo for the squeeze experimental packages of
#  Kontact.  It's here for your information :
#
#deb http://files.kolab.org/apt/releases squeeze prototyp-e5-experimental
#deb http://files.kolab.org/apt/sesame2 squeeze experimental
#
# Install with : aptitude install kdebase kdepim
